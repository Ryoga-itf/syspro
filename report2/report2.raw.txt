学籍番号: __STUDENT_ID__
名前: __STUDENT_NAME__
課題番号：2
練習問題番号：207
題名：システムプログラム 第2回レポート課題

以下のようなコードを書いて実験を行った。
文字列の長さは、 N=30000000 とし、ランダムな大文字英字で中身を埋めている。
また、T=100 回それぞれの関数を繰り返し、その総時間と一回あたりの平均時間を求め結果を出力するようにしている。

__INCLUDE(./strlen_report.c)__

結果は以下のようになった。

__INCLUDE(./output)__

my_strlen1 では、与えられた文字列を先頭から順に調べ、
1 文字ずつ読み出して NULL でないことを確認しながらカウントするような処理をしている。

my_strlen2 では、ほとんど意味が無いかもしれないが、register キーワードを使用し、レジスタに割り当てられることを期待するようにした。
また、ループの中はできる限り単純に、また 1 回あたりの処理は少なくした方がより高速になると考えられる。
そのため、ループ 1 回あたりのインクリメントを 1 回にし、最後にポインタ同士を引き算することで長さを得るようにした。

実際、my_strlen2 は my_strlen1 に比べ、およそ 2.5 倍高速になった。これは、期待した高速化が行われているようであった。
しかし、標準ライブラリ strlen の方がさらに高速であった。

調べてみると、標準ライブラリの strlen では 1 byte 毎の処理ではなく、複数バイトまとめて処理をし、さらなる高速化をしているようであった。
ヌル文字があるか調べながらロングワードの境界まで移動することによって高速化をしている。

===============================================================================

課題としては蛇足になってしまうが、この処理を参考に my_strlen2 をさらに高速にしてみることに挑戦してみた。

さらに改善した my_strlen2 のコードは以下のようになった。
なお、64bit 環境であること、そしてGCC でコンパイルすることを想定しているため、
long int が 64bit 幅で、 GCC 拡張である __builtin_ctzl を用いるコードになっている。

typedef unsigned long int ul;

#define hi 0x8080808080808080
#define lo 0x0101010101010101

size_t my_strlen2(const char *s) {
    // not 8 bytes aligned part
    register const char *ptr_char = s;
    while (((ul)ptr_char & 0x07) != 0) {
        if (*ptr_char == '\0') {
            return ptr_char - s;
        }
        ++ptr_char;
    }

    for (register const ul *ptr = (const ul *)ptr_char;; ++ptr) {
        register ul longword = *ptr;
        register ul masked = (longword - lo) & ~longword & hi;
        if (masked != 0) {
            int index = __builtin_ctzl(masked) >> 3;
            return (size_t)ptr - (size_t)s + index;
        }
    }
}

また結果は以下のようになった。

__INCLUDE(./output2)__

速くはなったが、やはりまだ strlen の方が高速であるという結果になった。
おおよそ 4 倍ほど差がある。 SIMD などを用いて更に大きな byte 単位毎に処理をしているのではないかと考えた。
調べてみると、SSE 4.2 には文字列比較用の命令があるらしく、
16 byte の中から特定のパターンを探してそのインデックスを得る、といったことが高速に処理できる、ということがわかった。
